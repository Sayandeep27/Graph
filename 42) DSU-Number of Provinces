

class DisjointSet
{
   vector<int>rank,parent,size;
 
public:
     
     DisjointSet(int n)
     {
         rank.resize(n+1,0);
         parent.resize(n+1);
         size.resize(n+1);
         
         for(int i=0;i<=n;i++)
         {
             parent[i]=i;
             size[i]=1;
         }
     }
     
     
     
     
     int findUPar(int node)
     {
         if(node==parent[node]) return node;
         
         
         return parent[node]=findUPar(parent[node]);
     }
     
     
     void unionByRank(int u,int v)
     {
         int ulp_u=findUPar(u);
         int ulp_v=findUPar(v);
         
         if(ulp_u==ulp_v) return;
         
         if(rank[ulp_u]<rank[ulp_v])
         {
             parent[ulp_u]=ulp_v;
         }
         else if(rank[ulp_u]>rank[ulp_v])
         {
             parent[ulp_v]=ulp_u;
         }
         else
         {
             parent[ulp_v]=ulp_u;
             
             parent[ulp_u]++;
         }
     }
     
     
     
     
     void unionBySize(int u,int v)
     {
         int ulp_u=findUPar(u);
         int ulp_v=findUPar(v);
         
         if(ulp_u==ulp_v) return;
         
         if(size[ulp_u]<size[ulp_v])
         {
             parent[ulp_u]=ulp_v;
             size[ulp_v]+=size[ulp_u];
         }
         else
         {
             parent[ulp_v]=ulp_u;
             size[ulp_u]+=size[ulp_v];
         }
         
     }
   

    
};






class Solution {
public:
   
    int findCircleNum(vector<vector<int>>& isConnected) {
          

         int n=isConnected.size();
         int m=isConnected[0].size();

         vector<int>adj[n+1];

         for(int i=0;i<n;i++)
         {
             for(int j=0;j<m;j++)
             {
                 if(isConnected[i][j]==1)
                 {
                     adj[i].push_back(j);
                     adj[j].push_back(i);
                 }
             }
         }


         DisjointSet ds(n);



         for(int i=0;i<n;i++)
         {
             for(int j=0;j<m;j++)
             {
                 if(isConnected[i][j]==1)
                 {
                     ds.unionBySize(i,j);
                 }
             }
         }


          set<int>st;  // set to store unique ultimate parents

          for(int i=0;i<n;i++)
          {
             
                 st.insert(ds.findUPar(i));
              
          }
  
        return st.size();


    }
};
