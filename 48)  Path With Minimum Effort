class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n=heights.size();
        int m=heights[0].size();

         priority_queue<pair<int, pair<int, int>>,
                       vector<pair<int, pair<int, int>>>,
                       greater<pair<int, pair<int, int>>>>
            q;

       vector<vector<int>>dist(n,vector<int>(m,INT_MAX));

       dist[0][0]=0;

       q.push({0,{0,0}}); // {diff,{row,col}}

       while(!q.empty())
       {
           int diff=q.top().first;
           int row=q.top().second.first;
           int col=q.top().second.second;

           q.pop();

           if(row==n-1 and col==m-1) return diff;


           int delrow[]={-1,0,+1,0};
           int delcol[]={0,+1,0,-1};

           for(int i=0;i<4;i++)
           {
               int newrow=row+delrow[i];
               int newcol=col+delcol[i];

               if(newrow>=0 and newrow<n and newcol>=0 and newcol<m)
               {
                   int new_effort=max(abs(heights[row][col]-heights[newrow][newcol]),diff);

                   if(new_effort<dist[newrow][newcol])
                   {
                       dist[newrow][newcol]=new_effort;

                       q.push({new_effort,{newrow,newcol}});
                   }
               }
           }

       }

       return 0;


    }
};
