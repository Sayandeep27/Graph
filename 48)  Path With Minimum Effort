typedef pair<int,pair<int,int>>pi;

class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
          
          int n=heights.size();
          int m=heights[0].size();

          vector<vector<int>>effort(n,vector<int>(m,1e9));

          effort[0][0]=0;

          priority_queue<pi,vector<pi>,greater<pi>>pq;

          pq.push({0,{0,0}}); // {effort,{row,col}}

          int delrow[]={-1,0,+1,0};
          int delcol[]={0,+1,0,-1};

          while(!pq.empty())
          {
              int x=pq.top().first;
              int row=pq.top().second.first;
              int col=pq.top().second.second;

              pq.pop();
              
              if(row==n-1 and col==m-1) return x;

              for(int i=0;i<4;i++)
              {
                  int newrow=row+delrow[i];
                  int newcol=col+delcol[i];

                  if(newrow<0 or newcol<0 or newrow>=n or newcol>=m) continue;

                  int diff=abs(heights[row][col]-heights[newrow][newcol]);

                  int new_effort=max(diff,x);

                  if(new_effort<effort[newrow][newcol])
                  {
                      effort[newrow][newcol]=new_effort;

                      pq.push({effort[newrow][newcol],{newrow,newcol}});
                  }
              }

          }

          return 0;
          

    }
};
