{
	public:
	
	void dfs(int node,vector<int>adj[],vector<int>&visited,stack<int>&st)
	{
	    visited[node]=1;
	    
	    for(auto it:adj[node])
	    {
	        if(visited[it]==0)
	        {
	            dfs(it,adj,visited,st);
	        }
	    }
	    
	    
	    st.push(node);
	    
	}
	
	
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int n, vector<int> adj[]) 
	{
	    vector<int>visited(n+1,0);
	    
	    stack<int>st;
	    
	    for(int i=0;i<n;i++)
	    {
	        if(visited[i]==0)
	        {
	            dfs(i,adj,visited,st);
	        }
	    }
	    
	    
	    vector<int>ans;
	    
	    while(!st.empty())
	    {
	        ans.push_back(st.top());
	        st.pop();
	    }
	    
	     return ans;
	    
	}
};
