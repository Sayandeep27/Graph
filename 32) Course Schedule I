
Time Complexity: O(V+E), where V = no. of nodes and E = no. of edges. This is a simple BFS algorithm.

Space Complexity: O(N) + O(N) ~ O(2N), O(N) for the indegree array, and O(N) for the queue data structure used in BFS(where N = no.of nodes). Extra O(N) for storing the topological sorting. Total ~ O(3N).



bool isPossible(int N, vector<pair<int, int> >& pre) {
	    // Code here
	    
	    int n=N;
	    
	    vector<int>adj[n];
	    
	    for(auto it:pre)
	    {
	        adj[it.first].push_back(it.second);
	    }
	    
	    
	    vector<int>indegree(n,0);
	    
	    for(int i=0;i<n;i++)
	    {
	        for(auto it:adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    
	    queue<int>q;
	    
	    for(int i=0;i<n;i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    
	    int cnt=0;
	    
	    
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        cnt++;
	        
	        for(auto it:adj[node])
	        {
	            indegree[it]--;
	            
	            if(indegree[it]==0)
	            {
	                q.push(it);
	            }
	        }
	    }
	    
	    
	    if(cnt==n) return true;
	    
	    
	    
	    return false;
	    
	}
