  public:
  
   bool check(int src,vector<int>&visited,vector<int>adj[])
   {
       visited[src]=1;
       
       queue<pair<int,int>>q;
       
       q.push({src,-1});
       
       while(!q.empty())
       {
           int node=q.front().first;
           int parent=q.front().second;
           
           q.pop();
           
           for(auto it:adj[node])
           {
               if(visited[it]==0)
               {
                   visited[it]=1;
                   q.push({it,node});
               }
               else if(it!=parent)
               {
                   return true;
               }
           }
       }
       

     return false;
    
       
   }
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int n=V;
        vector<int>visited(n,0);
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)
            {
                if(check(i,visited,adj)) return true;
            }
        }
        
        
        return false;
    }
};
