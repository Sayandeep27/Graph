
Time Complexity: O(NxM + NxMx4) ~ O(N x M)

For the worst case, the BFS function will be called for (N x M) nodes, and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time.

Space Complexity: O(N x M) + O(N x M) + O(N x M) ~ O(N x M)

O(N x M) for the visited array, distance matrix, and queue space takes up N x M locations at max. 




Class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& grid) {
        
        int n=grid.size();
        int m=grid[0].size();
        
        vector<vector<int>>visited(n,vector<int>(m,0));
        vector<vector<int>>dist(n,vector<int>(m,0));
        
        queue<pair<pair<int,int>,int>>q;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==0)
                {
                    visited[i][j]=1;
                    q.push({{i,j},0});
                }
                else
                {
                    visited[i][j]=0;
                }
            }
        }
        
        
        
        
        int delrow[]={-1,0,+1,0};
        int delcol[]={0,+1,0,-1};
        
        while(!q.empty())
        {
            int row=q.front().first.first;
            int col=q.front().first.second;
            
            int steps=q.front().second;
            
            q.pop();
            
            dist[row][col]=steps;
            
            for(int i=0;i<4;i++)
            {
                int newrow=row+delrow[i];
                int newcol=col+delcol[i];
                
                
                if(newrow>=0 and newrow<n and newcol>=0 and newcol<m and visited[newrow][newcol]==0)
                {
                    q.push({{newrow,newcol},steps+1});
                    visited[newrow][newcol]=1;
                }
                
                
            }
            
            
            
        }
        
        return dist;
    }
};
