class Solution{
    public:
    
    
    
    vector<int>toposort(int n,vector<int>adj[])
    {
        vector<int>indegree(n+1,0);
        
        vector<int>topo;
        
        for(int i=0;i<n;i++)
        {
            for(auto it:adj[i])
            {
                indegree[it]++;
            }
        }
        
        
        queue<int>q;
        
        for(int i=0;i<n;i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        
        
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            
            topo.push_back(node);
            
            for(auto it:adj[node])
            {
                indegree[it]--;
                
                if(indegree[it]==0)
                {
                    q.push(it);
                }
            }
            
        }
        
    return topo;
        
    }
    
    
    string findOrder(string dict[], int n, int k) {
        //code here
        
        vector<int>adj[k];
        
        
        for(int i=0;i<n-1;i++)
        {
            string s1=dict[i];
            string s2=dict[i+1];
            
            int len=min(s1.size(),s2.size());
            
            for(int j=0;j<len;j++)
            {
                if(s1[j]!=s2[j])
                {
                    adj[s1[j]-'a'].push_back(s2[j]-'a');
                    break;
                }
            }
        }
        
        
        vector<int>res;
        
        res=toposort(k,adj);
        
        string ans="";
        
        
        for(auto it:res)
        {
            ans+=char(it+'a');
        }
        
        return ans;
        
        
    }
};
