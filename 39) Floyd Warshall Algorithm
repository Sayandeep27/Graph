
Time Complexity: O(V3), as we have three nested loops each running for V times, where V = no. of vertices.

Space Complexity: O(V2), where V = no. of vertices. This space complexity is due to storing the adjacency matrix of the given graph.






class Solution {
  public:
	void shortest_distance(vector<vector<int>>&mat){
	    // Code here
	    
	    int n=mat.size();
	    
	    int m= mat[0].size();  // n==m
	    
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            if(i==j)
	            {
	                mat[i][j]=0;
	            }
	            
	            else if(mat[i][j]==-1)
	            {
	                mat[i][j]=1e9;
	            }
	        }
	    }
	    
	    
	    for(int k=0;k<n;k++)
	    {
	        for(int i=0;i<n;i++)
	        {
	            for(int j=0;j<n;j++)
	            {
	                mat[i][j]=min(mat[i][j],mat[i][k]+mat[k][j]);
	            }
	        }
	    }
	    
	    
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            if(mat[i][j]==1e9)
	            {
	                mat[i][j]=-1;
	            }
	        }
	    }
	    
	    
	    
	    
	    
	}
};
