

Time Complexity: O(V+E)+O(V) , where V = no. of nodes and E = no. of edges. There can be at most V components. So, another O(V) time complexity.

Space Complexity: O(2N) + O(N) ~ O(2N): O(2N) for two visited arrays and O(N) for recursive stack space.




public:
  
    bool detect(int node,vector<int>adj[],vector<int>&visited,vector<int>&pathvisited)
    {
        visited[node]=1;
        pathvisited[node]=1;
        
        for(auto it:adj[node])
        {
            if(visited[it]==0)
            {
                if(detect(it,adj,visited,pathvisited))
                {
                    return true;
                }
            }
            else if(pathvisited[it]!=0)
            {
                return true;
            }
        }
        
        pathvisited[node]=0;
        
        return false;
        
    }
  
  
    // Function to detect cycle in a directed graph.
    bool isCyclic(int n, vector<int> adj[]) {
        
        vector<int>visited(n+1,0);
        vector<int>pathvisited(n+1,0);
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)
            {
                if(detect(i,adj,visited,pathvisited))
                {
                    return true;
                }
            }
        }
        
        
        
        
        return false;
        
    }
};
