class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {

           vector<pair<int,int>>adj[n+1];
          
           for(int i=0;i<flights.size();i++)
           {
               for(int j=0;j<flights[i].size();j++)
               {
                    adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
               }
           }    

          vector<int>dist(n+1,INT_MAX);

          dist[src]=0;

          queue<pair<int,pair<int,int>>>pq;

          pq.push({0,{src,0}});  // {stops,{node,price}}

          while(!pq.empty())
          {
              int stops=pq.front().first;
              int node=pq.front().second.first;
              int price=pq.front().second.second;

              pq.pop();

              if(stops>k) continue;

              for(auto it:adj[node])
              {
                  int adjnode=it.first;
                  int edgeweight=it.second;

                  if(price+edgeweight<dist[adjnode] and stops<=k)
                  {
                      dist[adjnode]=price+edgeweight;

                      pq.push({stops+1,{adjnode,dist[adjnode]}});
                  }
              }


          }


          if(dist[dst]==INT_MAX) return -1;

          return dist[dst];


    }
};
