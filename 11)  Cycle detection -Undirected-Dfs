 
 Time Complexity: O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. In the case of connected components of a graph, it will take another O(N) time.
 
  bool check(int node,int parent,vector<int>&visited,vector<int>adj[])
  {
      
      visited[node]=1;
      
      for(auto it:adj[node])
      {
          if(visited[it]==0)
          {
              if(check(it,node,visited,adj)) return true;
              
          }
          else if(it!=parent) return true;
      }
      
      return false;
      
  }
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int n=V;
        vector<int>visited(n,0);
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)
            {
                if(check(i,-1,visited,adj)) return true;
            }
        }
        
        return false;
    }
};
