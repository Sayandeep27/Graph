class Solution {
public:
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
           
           int n=roads.size()+1;

           vector<int>adj[n];

           vector<int>degree(n,0);

           for(auto it:roads)
           {
               int u=it[0];
               int v=it[1];

               adj[u].push_back(v);
               adj[v].push_back(u);

               degree[u]++;
               degree[v]++;
           }

           queue<int>q;
   
           for(int i=0;i<n;i++)
           {
               if(degree[i]==1)
               {
                   q.push(i);
               }
           }


           long long ans=0;

           vector<int>people(n,1);

           while(!q.empty())
           {
               int sz=q.size();

               while(sz--)
               {
                    int node=q.front();
                    q.pop();

                    if(node==0) break;

                    ans+=(people[node]/seats);

                    if(people[node]%seats!=0) ans++;   // just ceill operation

                    for(auto it:adj[node])
                    {
                        degree[it]--;

                        people[it]=people[it]+people[node];

                        if(degree[it]==1)
                        {
                            q.push(it);
                        }
                    }

               }
           }


           return ans;
    }
};
