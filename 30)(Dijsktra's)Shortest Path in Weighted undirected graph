vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
       
            vector<pair<int, int>> adj[n + 1];
            for (auto it: edges)
            {
                adj[it[0]].push_back({ it[1], it[2] });
                adj[it[1]].push_back({ it[0], it[2] });
            }

            priority_queue<pair<int, int>, vector< pair<int, int>>, greater<pair<int, int>>> pq;
            pq.push({ 0, 1 });
            
            vector<int> dist(n + 1, 1e9);
            dist[1] = 0;

            vector<int> parent(n + 1);
            for(int i = 1; i <= n; i++) parent[i] = i;
            
            while (!pq.empty())
            {
                int d = pq.top().first;
                int node = pq.top().second;
                pq.pop();

                for (auto it: adj[node])
                {
                    int adjNode = it.first, wt = it.second;
                    if (dist[adjNode] > d + wt)
                    {
                        dist[adjNode] = d + wt;
                        parent[adjNode] = node;
                        pq.push({ d + wt, adjNode });
                    }
                }
            }
            
            if (dist[n] == 1e9) return { -1 };
            vector<int> ans;
            
            int node = n;
            while (parent[node] != node)
            {
                ans.push_back(node);
                node = parent[node];
            }
            ans.push_back(1);
            
            reverse(ans.begin(), ans.end());
            return ans;
        
    }
