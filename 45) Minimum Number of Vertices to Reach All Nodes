class Solution {
public:
    void toposort(vector<int> adj[] , int node , stack<int> &st , vector<bool>&visited){
           visited[node] = true;
           for(auto it : adj[node]){
                   if(visited[it]==0){
                          toposort(adj ,it , st , visited);
                   }
           }
          st.push(node);
    }
    void dfs(vector<int> adj[] , int node , vector<bool> &visited){
            visited[node] = true;
            for(auto it : adj[node]){
                 if(visited[it]==0){
                        dfs(adj , it , visited);
                 }
            }
    }
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {
          vector<int> result;
          stack<int> st;
          vector<int> adj[n];
          for(int i = 0 ; i < edges.size() ; i++){
                  adj[edges[i][0]].push_back(edges[i][1]);
                  
          }
         vector<bool> visited(n , false);
         for(int i = 0 ; i < n ; i++){
                if(visited[i]==0)
                     toposort(adj , i , st , visited);
         }
         for(int i = 0 ; i < n ; i++) visited[i] = false;
         while(st.size()){
                int node= st.top();
                st.pop();
                if(visited[node] == false){
                      result.push_back(node);
                      dfs(adj , node , visited);
                }
         }
        return result;
    }
};
