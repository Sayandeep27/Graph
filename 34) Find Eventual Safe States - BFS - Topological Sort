
Time Complexity: O(V+E)+O(N*logN), where V = no. of nodes and E = no. of edges. This is a simple BFS algorithm. Extra O(N*logN) for sorting the safeNodes array, where N is the number of safe nodes.

Space Complexity: O(N) + O(N) + O(N) ~ O(3N), O(N) for the indegree array, O(N) for the queue data structure used in BFS(where N = no.of nodes), and extra O(N) for the adjacency list to store the graph in a reversed order.



vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        // code here
    
       int n=V;    
        
       vector<int>adjrev[n];
       
       vector<int>indegree(n,0);
        
       for(int i=0;i<n;i++)
       {
           for(auto it:adj[i])
           {
               adjrev[it].push_back(i);
               indegree[i]++;
           }
       }
       
       queue<int>q;
       
       vector<int>safenodes;
       
       for(int i=0;i<n;i++)
       {
           if(indegree[i]==0)
           {
               q.push(i);
           }
       }
       
       while(!q.empty())
       {
           int node=q.front();
           q.pop();
           safenodes.push_back(node);
           
           for(auto it:adjrev[node])
           {
               indegree[it]--;
               
               if(indegree[it]==0)
               {
                   q.push(it);
               }
           }
       }
       
       
       sort(safenodes.begin(),safenodes.end());
       
       return safenodes;
          
    }
