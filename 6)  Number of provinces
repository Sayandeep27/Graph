class Solution {
public:
    void dfs(int node,vector<int>&visited,vector<int>adj[])
    {
        visited[node]=1;
        
        for(auto it:adj[node])
        {
            if(visited[it]==0)
            {
                dfs(it,visited,adj);
            }
        }
    
        
    }
    
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        
        int cnt=0;
        
        // creating adj list
        
        int n=isConnected.size();
        int m=isConnected[0].size();
        
        vector<int>adj[n+1];
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(isConnected[i][j]==1)
                {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        
        
        vector<int>visited(n+1,0);
        
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)
            {
                cnt++;
                dfs(i,visited,adj);
            }
        }
        
         
        
        return cnt;
    }
};
