
Time Complexity: O(V + 2E), Where V = Vertices, 2E is for total degrees as we traverse all adjacent nodes.

class Solution {
public:
    
    bool check(int start,vector<int>&color,vector<int>adj[],int n)
    {
        queue<int>q;

        q.push(start);

        color[start]=0;

        while(!q.empty())
        {
            int node=q.front();
            q.pop();

            for(auto it:adj[node])
            {
                if(color[it]==-1)
                {
                   if(color[node]==0) color[it]=1;
                   else if(color[node]==1) color[it]=0;

                   q.push(it);
                }
                else if(color[it]==color[node])
                {
                    return false;
                }
            }
        }

       return true;

    }

    bool isBipartite(vector<vector<int>>& graph) {
           
           int n=graph.size();

           vector<int>adj[n+1];

           for(int i=0;i<n;i++)
           {
               for(int j=0;j<graph[i].size();j++)
               {
                   adj[i].push_back(graph[i][j]);
                   adj[graph[i][j]].push_back(i);
               }
           }

           vector<int>color(n,-1);

           for(int i=0;i<n;i++)
           {
               if(color[i]==-1)
               {
                   if(check(i,color,adj,n)==false)
                   {
                       return false;
                   }
               }
           }
      
          return true;

           
    }
};
