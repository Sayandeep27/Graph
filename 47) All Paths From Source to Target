class Solution {
public:
    
    vector<vector<int>>ans;

    vector<int>path;


    void dfs(int node,int dest,vector<int>adj[])
    {
        path.push_back(node);

        if(node==dest)
        {
            ans.push_back(path);
            
        }
        else
        {
            for(auto it:adj[node])
            {
                dfs(it,dest,adj);
            }
        }

        

        path.pop_back();
    }

    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        
        int n=graph.size();
        vector<int>adj[n];

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<graph[i].size();j++)
            {
                adj[i].push_back(graph[i][j]);
            }
        }


        int src=0;
        int dest=n-1;

        dfs(src,dest,adj);
        
        return ans;
    }
};
