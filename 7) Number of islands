class Solution {
public:
    
    void dfs(int row,int col,vector<vector<int>>& visited,vector<vector<char>>& grid)
    {
        int n=grid.size();
        int m=grid[0].size();
        
        if(row<0 or row>=n or col<0 or col>=m)
        {
            return;
        }
        
        if(grid[row][col]=='0')
        {
            return;
        }
        
        
        if(visited[row][col]==0)
        {
            visited[row][col]=1;
            
            int delrow[4]={-1,0,+1,0};
            int delcol[4]={0,+1,0,-1};
            
            for(int i=0;i<4;i++)
            {
                int newrow=row+delrow[i];
                int newcol=col+delcol[i];
                
                dfs(newrow,newcol,visited,grid);
            }
            
            
        }
        
        
        
        
        
        
    }
    
    
    
    int numIslands(vector<vector<char>>& grid) {
        
        int n=grid.size();
        int m=grid[0].size();
        
        vector<vector<int>>visited(n,vector<int>(m,0));
        
        int count=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(visited[i][j]==0 and grid[i][j]=='1')
                {
                    count++;
                    dfs(i,j,visited,grid);

                }
            }
        }
        
        return count;
        
    }
};
